

装饰器模式：
    1.定义一个“基础接口类/抽象类”，定义所有的接口方法
    2.创建一个“具体实现类”，来对基础接口的所有方法的实现完成（主要功能）

    3.1如果装饰器类需要添加新的装饰，就需要新写一个“装饰类接口”，或者“装饰抽象类”，
    去继承原来的接口或抽象类，达到在装饰器类进行功能拓展
    （也可以直接加到基础类接口，那么基础类也存在此方法，根据情况不同，来进行自行判断）

    3.2创建一个“装饰器类”，实现“基础接口类”/“装饰类接口” 的接口，并实现所有方法，
    使用构造器构造接口类（new一个“具体实现类”构造进来，对具体实现类进行装饰）
    “装饰器类”中的所有方法的返回数据都来自于构造的“基础接口类”中的数据（其实就是“具体实现类”的数据）

    4.创建一个或者多个“具体装饰类”  extends  “装饰器类”   重写构造函数和所有方法，
    所有方法返回的都是构造函数对象中的方法+当前方法需要添加的东西，从而形成再原对象上添加装饰



装饰器模式的特点：
    每次装饰前都把原对象给到具体装饰器，然后在原对象上面进行装饰，装饰完以后返回新对象（原对象+新装饰）
    需要拓展新功能，就需要在装饰器类添加接口，装饰器类再去实现此接口，或者直接加到基础接口类也可以，根据情况来顶
