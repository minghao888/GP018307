

静态代理的原理:
        静态代理，是使用自己同一级别的另一个类/对象进行代理 前置和后置增强
        例：OrderService的代理类，就是和OrderService一同实现IOrderService接口的OrderServiceStaticProxy类，
        对OrderService类进行增强

    代理类和被代理类 必须实现同一个接口，方便方法的统一管理，普通类和代理类都有一个insert()，再代理类中创建普通类的对象即可代理,
    可以返回同一个接口的父类，父类直接调用接口就行了
注意：
    所有的组合对象都是可以认为是一种静态代理
    例：Service类对Dao类来说就是一个静态代理 （dao是service中的一个属性，某个方法回调用dao.xxx()）



代理模式的优点：
    代理模式能将代理对象与真实被调用的目标对象分离。
    一定程度上降低了系统的耦合程度，易于扩展。
    代理可以起到保护目标对象的作用。
    增强目标对象的职责

代理模式的缺点：
    代理模式会造成系统设计中类的数目增加
    在客户端和目标对象之间增加了一个代理对象，会造成请求处理速度变慢。
    增加了系统的复杂度


静态代理和动态的本质区别：
    1、静态代理只能通过手动完成代理操作，如果被代理类增加新的方法，代理类需要同步新增，违背开闭原则。
    2、动态代理采用在运行时动态生成代码的方式，取消了对被代理类的扩展限制，遵循开闭原则。
    3、若动态代理要对目标类的增强逻辑扩展，结合策略模式，只需要新增策略类便可完成，无需修改代理类的代码。

Spring中的代理选择原则：
    1、当Bean有实现接口时，Spring就会用JDK的动态代理。
    2、当Bean没有实现接口时，Spring选择CGLib。
    3、Spring可以通过配置强制使用CGLib，只需在Spring的配
    置文件中加入如下代码：
    <aop:aspectj-autoproxy proxy-targ